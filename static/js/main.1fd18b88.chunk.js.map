{"version":3,"sources":["Inspector.js","Pairing.js","App.js","reportWebVitals.js","index.js"],"names":["SERVICE_BIKE_INFO","SERVICE_COUNTERS","SERVICE_UUIDS","SERVICE_NAME","Inspector","device","onDisconnect","useState","services","setServices","error","setError","gattMutex","Mutex","useEffect","acquire","then","release","gatt","getPrimaryServices","map","service","name","uuid","console","log","catch","finally","Box","Button","onClick","disconnect","Alert","severity","AlertTitle","toString","serviceInfo","ServiceInspector","Typography","variant","component","CircularProgress","chars","setChars","expanded","setExpanded","getCharacteristics","Accordion","onChange","AccordionSummary","expandIcon","sx","width","flexShrink","color","length","LinearProgress","AccordionDetails","Table","TableHead","TableRow","TableCell","align","TableBody","char","CharInspector","getValue","value","byteLength","getUint8","getUint16","getUint32","Uint8Array","buffer","descriptor","setDescriptor","descriptorValue","setDescriptorValue","setValue","getDescriptor","readValue","colSpan","a","navigator","bluetooth","getAvailability","select","requestDevice","filters","optionalServices","window","selectedDevice","connect","Pairing","onConnect","resume","step","setStep","prev","next","setSelectedDevice","Stepper","activeStep","orientation","Step","StepLabel","StepContent","InstallAppStepContent","onNext","PairBikeStepContent","onPrev","SwitchBikeOnStepContent","SelectBikeStep","onSelectDevice","ConnectionStep","WizardInfoButtonGroup","back","cont","ButtonGroup","disabled","m","href","bleChecked","setBleChecked","bleAvailable","setBleAvailable","selectError","setSelectError","checkBluetoothAvailability","available","inProgress","setInProgress","connectionError","setConnectionError","App","setDevice","setResume","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1fd18b88.chunk.js","sourcesContent":["import {\n    Button, CircularProgress, Typography, Box,\n    Accordion, AccordionSummary, AccordionDetails,\n    Alert, AlertTitle, LinearProgress,\n    Table, TableHead, TableBody, TableRow, TableCell\n} from '@mui/material';\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\nimport React, { Fragment, useState, useEffect } from 'react';\nimport { Mutex } from 'async-mutex';\n\nconst SERVICE_BIKE_INFO = \"2f4ce2a3-fcbb-4f3a-b561-b9d78b5aae00\";\nconst SERVICE_COUNTERS = \"105c6761-74bf-4ffe-94ea-f8ba79f20600\";\n\nexport const SERVICE_UUIDS = [\n    SERVICE_BIKE_INFO, // bike info (serials, etc.)\n    SERVICE_COUNTERS, // distance ridden, on time, etc.\n];\n\nexport const SERVICE_NAME = {\n    [SERVICE_BIKE_INFO]: \"Bike Info\",\n    [SERVICE_COUNTERS]: \"Counters\",\n};\n\n\nexport default function Inspector({ device, onDisconnect }) {\n    const [services, setServices] = useState(null);\n    const [error, setError] = useState(null);\n    const gattMutex = new Mutex();\n\n    useEffect(() => {\n        if (!services) {\n            gattMutex\n                .acquire()\n                .then((release) => {\n                    device.gatt.getPrimaryServices()\n                        .then((services) => {\n                            services = services.map(service => {\n                                return {\n                                    name: SERVICE_NAME[service.uuid],\n                                    service: service\n                                }\n                            });\n                            console.log(\"Found services\", services)\n                            setServices(services);\n                        })\n                        .catch(setError)\n                        .finally(() => release());\n                });\n        }\n    });\n\n\n    return (\n        <Box>\n            <header>\n                <h2>{device.name}</h2>\n            </header>\n            <Button onClick={() => {\n                device.gatt.disconnect();\n                onDisconnect();\n            }}>\n                Disconnect\n            </Button>\n            {error &&\n                <Alert severity=\"error\">\n                    <AlertTitle>Service discovery failed</AlertTitle>\n                    {error.toString()}\n                </Alert>}\n            {services\n                ? services.map(serviceInfo => {\n                    const { name, service } = serviceInfo;\n                    return <ServiceInspector\n                        key={service.uuid}\n                        name={name}\n                        service={service}\n                        gattMutex={gattMutex} />\n                })\n                : <Box>\n                    <Typography variant=\"subtitle1\" component=\"div\">\n                        Discovering services...\n                    </Typography>\n                    <CircularProgress />\n                </Box>}\n        </Box>\n    )\n}\n\nfunction ServiceInspector({ gattMutex, name, service }) {\n    const [chars, setChars] = useState(null);\n    const [error, setError] = useState(null);\n    const [expanded, setExpanded] = useState(false);\n\n    useEffect(() => {\n        if (!error && !chars) {\n            gattMutex\n                .acquire()\n                .then((release) => {\n                    service.getCharacteristics()\n                        .then(setChars)\n                        .catch(setError)\n                        .finally(() => release());\n                });\n        }\n    });\n\n    return (\n        <Fragment key={service.uuid}>\n            <Accordion\n                key={service.uuid}\n                expanded={expanded}\n                onChange={() => setExpanded(!expanded)}>\n                <AccordionSummary expandIcon={<ExpandMoreIcon />}>\n                    <Typography sx={{ width: '33%', flexShrink: 0 }}>\n                        {name}\n                    </Typography>\n                    <Typography sx={{ color: 'text.secondary' }}>\n                        {error && <span>Error</span>}\n                        {!error && chars\n                            ? <span>{chars.length + \" values\"}</span>\n                            : <LinearProgress />}\n                    </Typography>\n                </AccordionSummary>\n                <AccordionDetails>\n                    {error &&\n                        <Alert severity=\"error\">\n                            <AlertTitle>Service discovery failed</AlertTitle>\n                            {error.toString()}\n                        </Alert>}\n                    {!error && chars\n                        ? <Table>\n                            <TableHead>\n                                <TableRow>\n                                    <TableCell>Name</TableCell>\n                                    <TableCell align=\"right\">Value</TableCell>\n                                </TableRow>\n                            </TableHead>\n                            <TableBody>\n                                {chars.map(char => <CharInspector key={char.uuid} char={char} gattMutex={gattMutex} />)}\n                            </TableBody>\n                        </Table>\n\n                        : <LinearProgress />}\n                </AccordionDetails>\n            </Accordion>\n        </Fragment>\n    );\n}\n\nfunction getValue(value) {\n    switch (value.byteLength) {\n        case 1:\n            return value.getUint8();\n        case 2:\n            return value.getUint16();\n        case 4:\n            return value.getUint32();\n        default:\n            return new Uint8Array(value.buffer).toString();\n    }\n}\n\nfunction CharInspector({ gattMutex, char }) {\n    const [descriptor, setDescriptor] = useState(null);\n    const [descriptorValue, setDescriptorValue] = useState(null);\n    const [value, setValue] = useState(null);\n    const [error, setError] = useState(null);\n\n    useEffect(() => {\n        if (!error && !descriptor) {\n            gattMutex.acquire()\n                .then((release) => {\n                    char.getDescriptor()\n                        .then(setDescriptor)\n                        .catch(setError)\n                        .finally(() => release())\n                });\n\n            gattMutex\n                .acquire()\n                .then((release) => {\n                    char.readValue()\n                        .then(setValue)\n                        .catch(setError)\n                        .finally(() => release())\n                });\n        }\n\n        if (!error && descriptor && !descriptorValue) {\n            gattMutex\n                .acquire()\n                .then((release) => {\n                    descriptor.readValue()\n                        .then(setDescriptorValue)\n                        .catch(setError)\n                        .finally(() => release())\n                });\n        }\n    });\n\n    return (\n        <Fragment key={char.uuid}>\n            {error &&\n                <TableRow key={char.uuid + \"error\"}>\n                    <TableCell colSpan={2}>\n                        <Alert severity=\"error\">\n                            {error.toString()}\n                        </Alert>\n                    </TableCell>\n                </TableRow>}\n            <TableRow key={char.uuid}>\n                <TableCell key=\"name\">\n                    {descriptorValue\n                        ? descriptorValue.toString()\n                        : \"Loading...\"}\n                </TableCell>\n                <TableCell key=\"value\" align=\"right\">\n                    {value\n                        ? getValue(value)\n                        : \"...\"}\n                </TableCell>\n            </TableRow>\n        </Fragment>\n    )\n\n}","import { Stepper, Step, StepLabel, StepContent, Box, Button, Typography, Alert, AlertTitle, ButtonGroup, LinearProgress, CircularProgress } from '@mui/material';\nimport React, { Fragment, useState, useEffect } from 'react';\nimport { SERVICE_UUIDS } from './Inspector';\n\n\nasync function checkBluetoothAvailability() {\n    return navigator.bluetooth && await navigator.bluetooth.getAvailability();\n}\n\nasync function select() {\n    const device = await navigator.bluetooth.requestDevice(\n        {\n            filters: [\n                { name: \"Brompton_Elec\" }\n            ],\n            optionalServices: SERVICE_UUIDS\n        }\n    );\n    window.device = device;\n    console.log(\"Selected device\", device);\n    return device;\n}\n\nasync function connect(selectedDevice) {\n    await selectedDevice.gatt.connect();\n    return selectedDevice;\n}\n\nexport default function Pairing({ onConnect, resume = false }) {\n    const [step, setStep] = useState(resume ? 2 : 0);\n    const [prev, next] = [() => setStep(step - 1), () => setStep(step + 1)];\n    const [selectedDevice, setSelectedDevice] = useState(null);\n\n    return (\n        <Box>\n            <Typography variant=\"h4\" component=\"div\">\n                Let's get set up<br /><br />\n            </Typography>\n            <Stepper activeStep={step} orientation=\"vertical\">\n                <Step key={0}>\n                    <StepLabel>\n                        Install the official Bromtpon Electric app\n                    </StepLabel>\n                    <StepContent>\n                        <InstallAppStepContent\n                            onNext={next} />\n                    </StepContent>\n                </Step>\n\n                <Step key={1}>\n                    <StepLabel>\n                        Pair your bike\n                    </StepLabel>\n                    <StepContent>\n                        <PairBikeStepContent\n                            onPrev={prev}\n                            onNext={next} />\n                    </StepContent>\n                </Step>\n\n                <Step key={2}>\n                    <StepLabel>\n                        Ensure your bike is switched on\n                    </StepLabel>\n                    <StepContent>\n                        <SwitchBikeOnStepContent\n                            onPrev={prev}\n                            onNext={next} />\n                    </StepContent>\n                </Step>\n\n                <Step key={3}>\n                    <StepLabel>\n                        Find your bike\n                    </StepLabel>\n                    <StepContent>\n                        <SelectBikeStep\n                            onPrev={prev}\n                            onSelectDevice={(device) => {\n                                setSelectedDevice(device);\n                                next();\n                            }} />\n                    </StepContent>\n                </Step>\n\n                <Step key={4}>\n                    <StepLabel>\n                        Connection attempt\n                    </StepLabel>\n                    <StepContent>\n                        <ConnectionStep\n                            onPrev={prev}\n                            onConnect={onConnect}\n                            selectedDevice={selectedDevice} />\n                    </StepContent>\n                </Step>\n            </Stepper>\n        </Box>\n    );\n}\n\nfunction WizardInfoButtonGroup({ back, cont }) {\n    return (\n        <ButtonGroup>\n            <Button disabled={!back} onClick={back}>\n                Back\n            </Button>\n            <Button onClick={cont}>\n                Continue\n            </Button>\n        </ButtonGroup >\n    )\n}\n\nfunction InstallAppStepContent({ onNext }) {\n    return (\n        <Fragment>\n            <Typography variant=\"p\" component=\"p\">\n                Brompton use a proprietary Bluetooth pairing mechanism, which means you can only pair your bike to your\n                phone through their app.<br /><br />\n            </Typography>\n            <Typography variant=\"p\" component=\"p\">\n                Once that's done, other apps on your phone will also be able to connect to your bike, using\n                the standard Bluetooth Low Energy (BLE) interface.\n            </Typography>\n            <Box m={2}>\n                <Button variant=\"contained\"\n                    href=\"https://play.google.com/store/apps/details?id=com.brompton\">\n                    Download Brompton Electric app from the Google Play Store\n                </Button>\n            </Box>\n            <WizardInfoButtonGroup back={null} cont={onNext} />\n        </Fragment>\n    )\n}\n\nfunction PairBikeStepContent({ onPrev, onNext }) {\n    return (\n        <Fragment>\n            <Typography variant=\"p\" component=\"p\">\n                Use the Brompton Electric app to connect to your bike for the first time.<br /><br />\n            </Typography>\n            <Typography variant=\"p\" component=\"p\">\n                You only need to do this once. You can skip this step, if you've done it before.<br /><br />\n            </Typography>\n            <WizardInfoButtonGroup back={onPrev} cont={onNext} />\n        </Fragment>\n    )\n}\n\nfunction SwitchBikeOnStepContent({ onPrev, onNext }) {\n    return (\n        <Fragment>\n            <Typography variant=\"p\" component=\"p\">\n                Turn on your bike.<br /><br />\n            </Typography>\n            <WizardInfoButtonGroup back={onPrev} cont={onNext} />\n        </Fragment>\n    )\n\n}\n\n\nfunction SelectBikeStep({ onPrev, onSelectDevice }) {\n    const [bleChecked, setBleChecked] = useState(false);\n    const [bleAvailable, setBleAvailable] = useState(false);\n    const [selectError, setSelectError] = useState(null);\n\n    useEffect(() => {\n        if (!bleChecked) {\n            checkBluetoothAvailability()\n                .then((available) => {\n                    setBleAvailable(available);\n                    setBleChecked(true);\n                })\n                .then(() => {\n                    select()\n                        .then(onSelectDevice)\n                        .catch(setSelectError)\n                });\n        }\n    });\n\n    return (\n        <Fragment>\n            <Typography variant=\"p\" component=\"p\">\n                Click continue, and select your bike from the list of Bluetooth devices. There should only\n                be one option, unless you're close to other bikes.<br /><br />\n            </Typography>\n\n            {!bleChecked &&\n                <Box>\n                    <LinearProgress />\n                    <Typography variant=\"subtitle1\" component=\"div\">\n                        Click the button below, and select your bike from the list of Bluetooth devices.\n                    </Typography>\n                </Box>\n            }\n            {bleChecked && !bleAvailable &&\n                <Alert severity=\"error\">\n                    <AlertTitle>Bluetooth not available</AlertTitle>\n                    Ensure your device is capable of connecting via Bluetooth (e.g. latest Chrome on Android).\n                </Alert>}\n            {selectError &&\n                <Alert severity=\"error\">\n                    <AlertTitle>Failed to select device</AlertTitle>\n                    {selectError.toString()}\n                </Alert>}\n            <WizardInfoButtonGroup back={onPrev} cont={\n                bleAvailable\n                    ? () => select()\n                        .then(onSelectDevice)\n                        .catch(setSelectError)\n                    : null\n            } />\n        </Fragment >\n    )\n}\n\nfunction ConnectionStep({ selectedDevice, onPrev, onConnect }) {\n    const [inProgress, setInProgress] = useState(true);\n    const [connectionError, setConnectionError] = useState(false);\n\n    useEffect(() => {\n        connect(selectedDevice)\n            .then(onConnect)\n            .catch(() => {\n                setInProgress(false);\n                setConnectionError(true);\n            });\n    });\n\n    return (\n        <Fragment>\n            {inProgress &&\n                <Box>\n                    <Typography variant=\"h6\" component=\"div\">\n                        Connecting...\n                    </Typography>\n                    <CircularProgress />\n                </Box>\n            }\n            {connectionError &&\n                <Alert severity=\"error\">\n                    <AlertTitle>An error has occurred</AlertTitle>\n                    Failed to connect to your Brompton. Ensure the bike is paired\n                    to the Brompton app.\n                </Alert>}\n            <WizardInfoButtonGroup back={onPrev} cont={null} />\n        </Fragment>\n    )\n}","import './App.css';\nimport React, { useState } from 'react';\nimport Pairing from './Pairing';\nimport Inspector from './Inspector';\nimport { Box } from '@mui/material';\n\n\n\nexport default function App() {\n  const [device, setDevice] = useState(null);\n  const [resume, setResume] = useState(false);\n\n  const disconnect = function () {\n    setDevice(false);\n    setResume(true);\n  }\n\n  return (\n    <Box m={2}>\n      {device ?\n        (<Inspector device={device} onDisconnect={disconnect} />) :\n        (<Pairing onConnect={setDevice} resume={resume} />)}\n    </Box>\n  )\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport '@fontsource/roboto/300.css';\nimport '@fontsource/roboto/400.css';\nimport '@fontsource/roboto/500.css';\nimport '@fontsource/roboto/700.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}